const request = require("supertest");
const app = require("../../app");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

describe("Accounts API", () => {
    beforeAll(async () => {
        await prisma.bank_accounts.deleteMany();
        await prisma.users.deleteMany();
    });

    afterAll(async () => {
        await prisma.$disconnect();
    });

    describe("POST /v1/accounts", () => {
        it("should create a new account", async () => {
            const user = await prisma.users.create({
                data: {
                    name: "John Doe",
                    email: "johndoe@example.com",
                },
            });

            const res = await request(app)
                .post("/v1/accounts")
                .send({
                    user_id: user.id,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: 1000000,
                });

            expect(res.statusCode).toEqual(201);
            expect(res.body.status).toEqual(true);
            expect(res.body.message).toEqual("Success Create Account");
            expect(res.body.data.user_id).toEqual(user.id);
            expect(res.body.data.bank_name).toEqual("Bank A");
            expect(res.body.data.bank_account_number).toEqual("1234567890");
            expect(res.body.data.balance).toEqual(1000000);
        });

        it("should return an error if user_id is invalid", async () => {
            const res = await request(app)
                .post("/v1/accounts")
                .send({
                    user_id: 999,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: 1000000,
                });

            expect(res.statusCode).toEqual(400);
            expect(res.body.status).toEqual(false);
            expect(res.body.message).toEqual("User tidak ditemukan");
        });

        it("should return an error if balance is invalid", async () => {
            const user = await prisma.users.create({
                data: {
                    name: "John Doe",
                    email: "johndoe@example.com",
                },
            });

            const res = await request(app)
                .post("/v1/accounts")
                .send({
                    user_id: user.id,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: -1000000,
                });

            expect(res.statusCode).toEqual(400);
            expect(res.body.status).toEqual(false);
            expect(res.body.message).toEqual("Saldo tidak valid");
        });

        it("should return an error if bank account number already exists", async () => {
            const user = await prisma.users.create({
                data: {
                    name: "John Doe",
                    email: "johndoe@example.com",
                },
            });

            await prisma.bank_accounts.create({
                data: {
                    user_id: user.id,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: 1000000,
                },
            });

            const res = await request(app)
                .post("/v1/accounts")
                .send({
                    user_id: user.id,
                    bank_name: "Bank B",
                    bank_account_number: "1234567890",
                    balance: 2000000,
                });

            expect(res.statusCode).toEqual(400);
            expect(res.body.status).toEqual(false);
            expect(res.body.message).toEqual(
                "Pengguna sudah memiliki rekening bank dengan nomor rekening yang sama"
            );
        });
    });

    describe("GET /v1/accounts", () => {
        it("should return a list of accounts", async () => {
            const user1 = await prisma.users.create({
                data: {
                    name: "John Doe",
                    email: "johndoe@example.com",
                },
            });

            const user2 = await prisma.users.create({
                data: {
                    name: "Jane Doe",
                    email: "janedoe@example.com",
                },
            });

            await prisma.bank_accounts.create({
                data: {
                    user_id: user1.id,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: 1000000,
                },
            });

            await prisma.bank_accounts.create({
                data: {
                    user_id: user2.id,
                    bank_name: "Bank B",
                    bank_account_number: "0987654321",
                    balance: 2000000,
                },
            });

            const res = await request(app).get("/v1/accounts");

            expect(res.statusCode).toEqual(200);
            expect(res.body.status).toEqual(true);
            expect(res.body.message).toEqual("Success");
            expect(res.body.data.pagination.page).toEqual(1);
            expect(res.body.data.pagination.limit).toEqual(10);
            expect(res.body.data.pagination.totalPages).toEqual(1);
            expect(res.body.data.pagination.totalItems).toEqual(2);
            expect(res.body.data.dataAccount.length).toEqual(2);
            expect(res.body.data.dataAccount[0].user_id).toEqual(user1.id);
            expect(res.body.data.dataAccount[0].bank_name).toEqual("Bank A");
            expect(res.body.data.dataAccount[0].bank_account_number).toEqual(
                "1234567890"
            );
            expect(res.body.data.dataAccount[0].balance).toEqual(1000000);
            expect(res.body.data.dataAccount[1].user_id).toEqual(user2.id);
            expect(res.body.data.dataAccount[1].bank_name).toEqual("Bank B");
            expect(res.body.data.dataAccount[1].bank_account_number).toEqual(
                "0987654321"
            );
            expect(res.body.data.dataAccount[1].balance).toEqual(2000000);
        });
    });

    describe("GET /v1/accounts/:id", () => {
        it("should return an account by id", async () => {
            const user = await prisma.users.create({
                data: {
                    name: "John Doe",
                    email: "johndoe@example.com",
                },
            });

            const account = await prisma.bank_accounts.create({
                data: {
                    user_id: user.id,
                    bank_name: "Bank A",
                    bank_account_number: "1234567890",
                    balance: 1000000,
                },
            });

            const res = await request(app).get(`/v1/accounts/${account.id}`);

            expect(res.statusCode).toEqual(200);
            expect(res.body.status).toEqual(true);
            expect(res.body.message).toEqual("Success");
            expect(res.body.data.user_id).toEqual(user.id);
            expect(res.body.data.bank_name).toEqual("Bank A");
            expect(res.body.data.bank_account_number).toEqual("1234567890");
            expect(res.body.data.balance).toEqual(1000000);
        });

        it("should return an error if account is not found", async () => {
            const res = await request(app).get("/v1/accounts/999");

            expect(res.statusCode).toEqual(400);
            expect(res.body.status).toEqual(false);
            expect(res.body.message).toEqual("Account not found");
            expect(res.body.data).toEqual(null);
        });
    });
});
