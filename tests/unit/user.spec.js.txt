const request = require("supertest");
const app = require("../../app");
const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcrypt");
const {restrict} = require('../../middlewares/auth.middlewares');
const prisma = new PrismaClient();

describe("User API", () => {
    let token;
    let user;

    beforeAll(async () => {
        // create a user for testing
        const password = "password";
        const encryptedPassword = await bcrypt.hash(password, 10);
        user = await prisma.users.create({
            data: {
                name: "Test User",
                email: "testuser@example.com",
                password: encryptedPassword,
            },
        });

        // get JWT token for authentication
        const response = await request(app)
            .post("/api/v1/login")
            .send({ email: "testuser@example.com", password: "password" });
        token = response.body.data.token;
    });

    afterAll(async () => {
        // delete the user created for testing
        await prisma.users.delete({
            where: {
                id: user.id,
            },
        });
        await prisma.$disconnect();
    });

    describe("POST /api/v1/register", () => {
        it("should return 400 if password and password_confirmation do not match", async () => {
            const response = await request(app)
                .post("/api/v1/register")
                .send({
                    name: "Test User",
                    email: "testuser@example.com",
                    password: "password",
                    password_confirmation: "wrongpassword",
                });
            expect(response.status).toBe(400);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Bad Request");
            expect(response.body.err).toBe(
                "please ensure that the password and password confirmation match!"
            );
            expect(response.body.data).toBeNull();
        });

        it("should return 400 if name, email, or password is not provided", async () => {
            const response = await request(app)
                .post("/api/v1/register")
                .send({
                    name: "",
                    email: "",
                    password: "",
                    password_confirmation: "",
                });
            expect(response.status).toBe(400);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Bad Request");
            expect(response.body.err).toBe("All field must be filled");
            expect(response.body.data).toBeNull();
        });

        it("should return 400 if email is already registered", async () => {
            const response = await request(app)
                .post("/api/v1/register")
                .send({
                    name: "Test User",
                    email: "testuser@example.com",
                    password: "password",
                    password_confirmation: "password",
                });
            expect(response.status).toBe(400);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Bad Request");
            expect(response.body.err).toBe("Email already exist");
            expect(response.body.data).toBeNull();
        });

        it("should return 200 if user is successfully registered", async () => {
            const response = await request(app)
                .post("/api/v1/register")
                .send({
                    name: "New User",
                    email: "newuser@example.com",
                    password: "password",
                    password_confirmation: "password",
                });
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(true);
            expect(response.body.message).toBe("Success");
            expect(response.body.data.name).toBe("New User");
            expect(response.body.data.email).toBe("newuser@example.com");
        });
    });

    describe("POST /api/v1/login", () => {
        it("should return 400 if email or password is invalid", async () => {
            const response = await request(app)
                .post("/api/v1/login")
                .send({ email: "testuser@example.com", password: "wrongpassword" });
            expect(response.status).toBe(400);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Bad Request");
            expect(response.body.err).toBe("invalid email or password!");
            expect(response.body.data).toBeNull();
        });

        it("should return 500 if JWT_SECRET_KEY is not defined", async () => {
            process.env.JWT_SECRET_KEY = "";
            const response = await request(app)
                .post("/api/v1/login")
                .send({ email: "testuser@example.com", password: "password" });
            expect(response.status).toBe(500);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Internal Server Error");
            expect(response.body.err).toBe("JWT_SECRET_KEY is not defined!");
            expect(response.body.data).toBeNull();
        });

        it("should return 200 with JWT token if email and password are valid", async () => {
            process.env.JWT_SECRET_KEY = "secret";
            const response = await request(app)
                .post("/api/v1/login")
                .send({ email: "testuser@example.com", password: "password" });
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(true);
            expect(response.body.message).toBe("OK");
            expect(response.body.err).toBeNull();
            expect(response.body.data.user.id).toBe(user.id);
            expect(response.body.data.token).toBeDefined();
        });
    });

    describe("GET /api/v1/authenticate", () => {
        it("should return 200 with user data if authenticated", async () => {
            const response = await request(app)
                .get("/api/v1/authenticate")
                .set("Authorization", `Bearer ${token}`);
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(true);
            expect(response.body.message).toBe("OK");
            expect(response.body.err).toBeNull();
            expect(response.body.data.user.id).toBe(user.id);
        });

        it("should return 401 if not authenticated", async () => {
            const response = await request(app).get("/api/v1/authenticate");
            expect(response.status).toBe(401);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("Unauthorized");
            expect(response.body.err).toBe("Invalid token");
            expect(response.body.data).toBeNull();
        });
    });

    describe("GET /api/v1/users", () => {
        it("should return 200 with paginated user data", async () => {
            const response = await request(app).get("/api/v1/users");
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(true);
            expect(response.body.message).toBe("Success");
            expect(response.body.data.pagination).toBeDefined();
            expect(response.body.data.dataUsers.length).toBeGreaterThan(0);
        });
    });

    describe("GET /api/v1/users/:id", () => {
        it("should return 400 if user id is invalid", async () => {
            const response = await request(app).get("/api/v1/users/invalidid");
            expect(response.status).toBe(400);
            expect(response.body.status).toBe(false);
            expect(response.body.message).toBe("User not found");
            expect(response.body.data).toBeNull();
        });

        it("should return 200 with user data and profile data", async () => {
            const response = await request(app).get(`/api/v1/users/${user.id}`);
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(true);
            expect(response.body.message).toBe("Success");
            expect(response.body.data.id).toBe(user.id);
            expect(response.body.data.name).toBe(user.name);
            expect(response.body.data.email).toBe(user.email);
            expect(response.body.data.profiles).toBeDefined();
        });
    });
});
